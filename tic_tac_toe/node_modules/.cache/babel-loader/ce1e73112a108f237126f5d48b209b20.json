{"ast":null,"code":"var _jsxFileName = \"/Users/stuthi/Desktop/sample-app/src/page.js\";\nimport Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\nimport Header from './header';\nimport ModalForm from './modal';\nimport { get } from 'lodash';\nimport React from 'react';\nconst sybmol = {\n  'player_1': 'X',\n  'player_2': 'O'\n};\nconst playerType = {\n  'player_1': 'Player 1',\n  'player_2': 'Player 2'\n};\nconst maxTime = 5;\nlet interval;\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.handlePlayResetClick = this.handlePlayResetClick.bind(this);\n    this.showModalHandler = this.showModalHandler.bind(this);\n    this.closeModalHandler = this.closeModalHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[], [], []],\n        player: 'player_1',\n        reset: false,\n        winnerFound: false,\n        gameStarted: false,\n        matrixLength: 0\n      };\n    });\n  }\n\n  handlePlayResetClick(isReset) {\n    if (isReset) {\n      clearInterval(interval);\n      this.setState(() => {\n        return {\n          gameStarted: true,\n          matrix: [[], [], []],\n          player: 'player_1',\n          winnerFound: false,\n          seconds: maxTime,\n          matrixLength: 0\n        };\n      }, this.startTimer(maxTime));\n    } else {\n      this.setState(() => {\n        return {\n          gameStarted: true\n        };\n      }, this.startTimer(maxTime));\n    }\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining = maxTime;\n    interval = setInterval(() => {\n      if (secondsRemaining === 0) {\n        console.log('in if timer');\n        clearInterval(interval);\n        this.setState(() => {\n          return {\n            gameOver: true,\n            winnerFound: false\n          };\n        }, this.showModalHandler);\n      } else {\n        console.log('in else timer');\n\n        if (!get(this.state, 'winnerFound', false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState(() => {\n            return {\n              seconds: secondsRemaining,\n              gameOver: false\n            };\n          }, this.showModalHandler);\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if (interval) {\n      clearInterval(interval);\n    }\n\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state, 'seconds', maxTime);\n    const isWinnerFound = get(this.state, 'winnerFound', false);\n    const isGameStarted = get(this.state, 'gameStarted', false);\n    let matrixLength = get(this.state, 'matrixLength', 0) + 1;\n\n    if (secondsRemaining > 0 && !isWinnerFound && isGameStarted) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1',\n          matrixLength\n        };\n      });\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state, 'matrix', [[], [], []]);\n\n    if (!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n\n    this.setState(() => {\n      return {\n        matrix\n      };\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n\n    if (this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n\n    this.setState(() => {\n      return {\n        winnerFound: winnerFound,\n        gameOver: winnerFound,\n        winner: playerType[player]\n      };\n    });\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (col === 0) {\n      matched = currentVal === matrix[row][col + 1] && currentVal === matrix[row][col + 2];\n    } else if (col === 1) {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col + 1];\n    } else {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col - 2];\n    }\n\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (row === 0) {\n      matched = currentVal === matrix[row + 1][col] && currentVal === matrix[row + 2][col];\n    } else if (row === 1) {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row + 1][col];\n    } else {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row - 2][col];\n    }\n\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n\n    if (!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = centerVal === matrix[0][0] && centerVal === matrix[2][2] || centerVal === matrix[0][2] && centerVal === matrix[2][0];\n    }\n\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state, 'seconds', maxTime);\n    return secondsRemaining === 0;\n  }\n\n  isTie() {\n    let winnerFound = get(this.state, 'winnerFound', false);\n    let matrixLength = get(this.state, 'matrixLength', 0);\n    return !winnerFound && matrixLength === 9;\n  }\n\n  showModalHandler() {\n    console.log('showModalHandler: ', this.state);\n    let showModal = get(this.state, 'gameOver', false) || this.isTie();\n    console.log('showModalHandler --- ', showModal);\n    this.setState({\n      showModal\n    });\n  }\n\n  closeModalHandler() {\n    this.setState({\n      showModal: false\n    });\n  }\n\n  render() {\n    //console.log('render: ', this.state);\n    return React.createElement(\"div\", {\n      style: {\n        'background': 'black',\n        'opacity': 0.8,\n        'height': '90vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, get(this.state, 'showModal', false) ? React.createElement(ModalForm, {\n      winnerFound: get(this.state, 'winnerFound', false),\n      isGameOver: get(this.state, 'gameOver', false),\n      winnerName: get(this.state, 'winner', ''),\n      isTie: this.isTie(),\n      closeModal: this.closeModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }) : '', React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Content, {\n      handleTileClick: this.handleTileClick,\n      matrixContent: get(this.state, 'matrix', [[], [], []]),\n      player: get(this.state, 'player', 'player_1'),\n      winnerFound: get(this.state, 'winnerFound', false),\n      secondsRemaining: get(this.state, 'seconds', maxTime),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(GameController, {\n      isGameOver: this.isGameOver(),\n      isGameStarted: get(this.state, 'gameStarted', false),\n      onPlayResetClick: this.handlePlayResetClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Page;","map":{"version":3,"sources":["/Users/stuthi/Desktop/sample-app/src/page.js"],"names":["Content","Footer","GameController","Header","ModalForm","get","React","sybmol","playerType","maxTime","interval","Page","Component","constructor","props","handleTileClick","bind","startTimer","handlePlayResetClick","showModalHandler","closeModalHandler","componentDidMount","setState","matrix","player","reset","winnerFound","gameStarted","matrixLength","isReset","clearInterval","seconds","secondsRemaining","setInterval","console","log","gameOver","state","resetTimer","row","col","isWinnerFound","isGameStarted","setMatrix","checkForWinner","checkHorizontal","checkVertical","checkDiagonal","winner","matched","currentVal","centerVal","isGameOver","isTie","showModal","render"],"mappings":"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","sourcesContent":["import Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\nimport Header from './header';\nimport ModalForm from './modal';\n\n\nimport { get } from 'lodash';\nimport React from 'react';\n\nconst sybmol = {\n  'player_1' : 'X',\n  'player_2' : 'O',\n};\n\nconst playerType = {\n  'player_1' : 'Player 1',\n  'player_2' : 'Player 2',\n}\n\nconst maxTime = 5;\nlet interval;\n\nclass Page extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.handlePlayResetClick = this.handlePlayResetClick.bind(this);\n    this.showModalHandler = this.showModalHandler.bind(this);\n    this.closeModalHandler = this.closeModalHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[],[],[]],\n        player : 'player_1',\n        reset: false,\n        winnerFound: false,\n        gameStarted: false,\n        matrixLength: 0,\n      }\n    });\n  }\n\n  handlePlayResetClick(isReset) {\n    if(isReset) {\n      clearInterval(interval);\n      this.setState(() => {\n        return {\n          gameStarted: true,\n          matrix: [[],[],[]],\n          player : 'player_1',\n          winnerFound: false,\n          seconds: maxTime,\n          matrixLength: 0,\n        }\n      }, this.startTimer(maxTime))\n    } else {\n      this.setState(() => {\n        return {\n          gameStarted: true,\n        }\n      }, this.startTimer(maxTime));\n    }\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining =  maxTime;\n    interval = setInterval(() => {\n      if(secondsRemaining === 0) {\n        console.log('in if timer');\n\n        clearInterval(interval);\n        this.setState(() => {\n          return {\n            gameOver: true,\n            winnerFound: false,\n          }\n        }, this.showModalHandler)\n      } else {\n        console.log('in else timer');\n        if(!get(this.state,'winnerFound',false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState(() => {\n            return {\n              seconds: secondsRemaining,\n              gameOver: false,\n            }\n\n          }, this.showModalHandler)\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if(interval) {\n      clearInterval(interval);\n    }\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state,'seconds',maxTime);\n    const isWinnerFound = get(this.state,'winnerFound',false);\n    const isGameStarted = get(this.state,'gameStarted',false);\n    let matrixLength = get(this.state,'matrixLength',0) + 1;\n    if(secondsRemaining > 0 && !isWinnerFound && isGameStarted) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1',\n          matrixLength,\n        }\n      })\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state,'matrix', [[],[],[]]);\n    if(!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n    this.setState(() => {\n      return {\n        matrix,\n      }\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n    if(this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n    this.setState(() => {\n      return {\n        winnerFound : winnerFound,\n        gameOver : winnerFound,\n        winner : playerType[player],\n      }\n    })\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(col === 0) {\n      matched = (currentVal === matrix[row][col+1]) && (currentVal === matrix[row][col+2]);\n    } else if(col === 1) {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col+1]);\n    } else {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col-2]);\n    }\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(row === 0) {\n      matched = (currentVal === matrix[row+1][col]) && (currentVal === matrix[row+2][col]);\n    } else if(row === 1) {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row+1][col]);\n    } else {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row-2][col]);\n    }\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n    if(!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = ((centerVal === matrix[0][0]) &&\n                  (centerVal === matrix[2][2])) ||\n                ((centerVal === matrix[0][2]) &&\n                  (centerVal === matrix[2][0]));\n    }\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state,'seconds',maxTime);\n    return (secondsRemaining === 0);\n  }\n\n  isTie() {\n    let winnerFound = get(this.state,'winnerFound',false);\n    let matrixLength = get(this.state,'matrixLength',0);\n    return !winnerFound && (matrixLength === 9);\n  }\n\n  showModalHandler() {\n    console.log('showModalHandler: ', this.state);\n    let showModal = get(this.state,'gameOver',false) || this.isTie();\n      console.log('showModalHandler --- ', showModal);\n    this.setState({\n      showModal,\n    });\n  }\n\n  closeModalHandler() {\n    this.setState({\n      showModal: false,\n    });\n  }\n\n  render() {\n    //console.log('render: ', this.state);\n    return(\n      <div style={{'background':'black', 'opacity':0.8, 'height':'90vw'}}>\n      {\n        get(this.state,'showModal',false) ?\n          <ModalForm\n             winnerFound={get(this.state,'winnerFound',false)}\n             isGameOver={get(this.state,'gameOver',false)}\n             winnerName={get(this.state,'winner','')}\n             isTie={this.isTie()}\n             closeModal={this.closeModalHandler}\n          /> : ''\n      }\n\n        <Header />\n        <Content\n           handleTileClick={this.handleTileClick}\n           matrixContent={get(this.state, 'matrix', [[],[],[]])}\n           player={get(this.state, 'player', 'player_1')}\n           winnerFound={get(this.state,'winnerFound',false)}\n           secondsRemaining={get(this.state,'seconds',maxTime)}\n        />\n        <GameController\n          isGameOver={this.isGameOver()}\n          isGameStarted={get(this.state,'gameStarted',false)}\n          onPlayResetClick={this.handlePlayResetClick}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}