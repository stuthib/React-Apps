{"ast":null,"code":"var _jsxFileName = \"/Users/stuthi/Desktop/sample-app/src/page.js\";\nimport Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\nimport Header from './header';\nimport ModalForm from './modal';\nimport { get } from 'lodash';\nimport React from 'react';\nconst sybmol = {\n  'player_1': 'X',\n  'player_2': 'O'\n};\nconst playerType = {\n  'player_1': 'Player 1',\n  'player_2': 'Player 2'\n};\nconst maxTime = 12;\nlet interval;\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.handlePlayResetClick = this.handlePlayResetClick.bind(this);\n    this.showModalHandler = this.showModalHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[], [], []],\n        player: 'player_1',\n        //start: false,\n        reset: false,\n        winnerFound: false,\n        gameStarted: false\n      };\n    });\n  }\n\n  handlePlayResetClick(isReset) {\n    if (isReset) {\n      clearInterval(interval);\n      this.setState(() => {\n        return {\n          gameStarted: true,\n          matrix: [[], [], []],\n          player: 'player_1',\n          winnerFound: false,\n          seconds: maxTime\n        };\n      }, this.startTimer(maxTime));\n    } else {\n      this.setState(() => {\n        return {\n          gameStarted: true\n        };\n      }, this.startTimer(maxTime));\n    }\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining = maxTime;\n    interval = setInterval(() => {\n      if (secondsRemaining === 0) {\n        clearInterval(interval);\n        this.setState({\n          gameOver: true,\n          winnerFound: false\n        });\n      } else {\n        if (!get(this.state, 'winnerFound', false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState({\n            seconds: secondsRemaining,\n            gameOver: false\n          });\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if (interval) {\n      clearInterval(interval);\n    }\n\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state, 'seconds', maxTime);\n    const isWinnerFound = get(this.state, 'winnerFound', false);\n    const isGameStarted = get(this.state, 'gameStarted', false); //console.log(isGameStarted);\n\n    if (secondsRemaining > 0 && !isWinnerFound && isGameStarted) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1'\n        };\n      });\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state, 'matrix', [[], [], []]);\n\n    if (!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n\n    this.setState(() => {\n      return {\n        matrix\n      };\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n\n    if (this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n\n    this.setState(() => {\n      return {\n        winnerFound: winnerFound,\n        gameOver: winnerFound,\n        winner: playerType[player]\n      };\n    });\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (col === 0) {\n      matched = currentVal === matrix[row][col + 1] && currentVal === matrix[row][col + 2];\n    } else if (col === 1) {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col + 1];\n    } else {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col - 2];\n    }\n\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (row === 0) {\n      matched = currentVal === matrix[row + 1][col] && currentVal === matrix[row + 2][col];\n    } else if (row === 1) {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row + 1][col];\n    } else {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row - 2][col];\n    }\n\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n\n    if (!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = centerVal === matrix[0][0] && centerVal === matrix[2][2] || centerVal === matrix[0][2] && centerVal === matrix[2][0];\n    }\n\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state, 'seconds', maxTime);\n    return secondsRemaining === 0;\n  }\n\n  showModalHandler() {\n    console.log('showModal clicked');\n    return get(this.state, 'gameOver', false);\n  }\n\n  render() {\n    console.log('render: ', this.state);\n    return React.createElement(\"div\", {\n      style: {\n        'background': 'black',\n        'opacity': 0.8,\n        'height': '90vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(ModalForm, {\n      showModal: this.showModalHandler,\n      winnerFound: get(this.state, 'winnerFound', false),\n      isGameOver: get(this.state, 'gameOver', false),\n      winnerName: get(this.state, 'winner', ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(Content, {\n      handleTileClick: this.handleTileClick,\n      matrixContent: get(this.state, 'matrix', [[], [], []]),\n      player: get(this.state, 'player', 'player_1'),\n      winnerFound: get(this.state, 'winnerFound', false),\n      secondsRemaining: get(this.state, 'seconds', maxTime),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(GameController, {\n      isGameOver: this.isGameOver(),\n      isGameStarted: get(this.state, 'gameStarted', false),\n      onPlayResetClick: this.handlePlayResetClick,\n      showModal: this.showModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Page;","map":{"version":3,"sources":["/Users/stuthi/Desktop/sample-app/src/page.js"],"names":["Content","Footer","GameController","Header","ModalForm","get","React","sybmol","playerType","maxTime","interval","Page","Component","constructor","props","handleTileClick","bind","startTimer","handlePlayResetClick","showModalHandler","componentDidMount","setState","matrix","player","reset","winnerFound","gameStarted","isReset","clearInterval","seconds","secondsRemaining","setInterval","gameOver","state","resetTimer","row","col","isWinnerFound","isGameStarted","setMatrix","console","log","checkForWinner","checkHorizontal","checkVertical","checkDiagonal","winner","matched","currentVal","centerVal","isGameOver","render"],"mappings":"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","sourcesContent":["import Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\nimport Header from './header';\nimport ModalForm from './modal';\n\n\nimport { get } from 'lodash';\nimport React from 'react';\n\nconst sybmol = {\n  'player_1' : 'X',\n  'player_2' : 'O',\n};\n\nconst playerType = {\n  'player_1' : 'Player 1',\n  'player_2' : 'Player 2',\n}\n\nconst maxTime = 12;\nlet interval;\n\nclass Page extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.handlePlayResetClick = this.handlePlayResetClick.bind(this);\n    this.showModalHandler = this.showModalHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[],[],[]],\n        player : 'player_1',\n        //start: false,\n        reset: false,\n        winnerFound: false,\n        gameStarted: false,\n      }\n    });\n  }\n\n  handlePlayResetClick(isReset) {\n    if(isReset) {\n      clearInterval(interval);\n      this.setState(() => {\n        return {\n          gameStarted: true,\n          matrix: [[],[],[]],\n          player : 'player_1',\n          winnerFound: false,\n          seconds: maxTime,\n        }\n      }, this.startTimer(maxTime))\n    } else {\n      this.setState(() => {\n        return {\n          gameStarted: true,\n        }\n      }, this.startTimer(maxTime));\n    }\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining =  maxTime;\n    interval = setInterval(() => {\n      if(secondsRemaining === 0) {\n        clearInterval(interval);\n        this.setState({\n          gameOver: true,\n          winnerFound: false,\n        })\n      } else {\n        if(!get(this.state,'winnerFound',false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState({\n            seconds: secondsRemaining,\n            gameOver: false,\n          })\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if(interval) {\n      clearInterval(interval);\n    }\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state,'seconds',maxTime);\n    const isWinnerFound = get(this.state,'winnerFound',false);\n    const isGameStarted = get(this.state,'gameStarted',false);\n    //console.log(isGameStarted);\n    if(secondsRemaining > 0 && !isWinnerFound && isGameStarted) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1',\n        }\n      })\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state,'matrix', [[],[],[]]);\n    if(!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n    this.setState(() => {\n      return {\n        matrix,\n      }\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n    if(this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n    this.setState(() => {\n      return {\n        winnerFound : winnerFound,\n        gameOver : winnerFound,\n        winner : playerType[player],\n      }\n    })\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(col === 0) {\n      matched = (currentVal === matrix[row][col+1]) && (currentVal === matrix[row][col+2]);\n    } else if(col === 1) {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col+1]);\n    } else {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col-2]);\n    }\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(row === 0) {\n      matched = (currentVal === matrix[row+1][col]) && (currentVal === matrix[row+2][col]);\n    } else if(row === 1) {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row+1][col]);\n    } else {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row-2][col]);\n    }\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n    if(!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = ((centerVal === matrix[0][0]) &&\n                  (centerVal === matrix[2][2])) ||\n                ((centerVal === matrix[0][2]) &&\n                  (centerVal === matrix[2][0]));\n    }\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state,'seconds',maxTime);\n    return secondsRemaining === 0;\n  }\n\n  showModalHandler() {\n    console.log('showModal clicked');\n    return get(this.state,'gameOver',false);\n  }\n\n  render() {\n    console.log('render: ', this.state);\n    return(\n      <div style={{'background':'black', 'opacity':0.8, 'height':'90vw'}}>\n        <ModalForm\n           showModal={this.showModalHandler}\n           winnerFound={get(this.state,'winnerFound',false)}\n           isGameOver={get(this.state,'gameOver',false)}\n           winnerName={get(this.state,'winner','')}\n\n        />\n        <Header />\n        <Content\n           handleTileClick={this.handleTileClick}\n           matrixContent={get(this.state, 'matrix', [[],[],[]])}\n           player={get(this.state, 'player', 'player_1')}\n           winnerFound={get(this.state,'winnerFound',false)}\n           secondsRemaining={get(this.state,'seconds',maxTime)}\n         />\n        <GameController\n          isGameOver={this.isGameOver()}\n          isGameStarted={get(this.state,'gameStarted',false)}\n          onPlayResetClick={this.handlePlayResetClick}\n\n          showModal={this.showModalHandler}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}