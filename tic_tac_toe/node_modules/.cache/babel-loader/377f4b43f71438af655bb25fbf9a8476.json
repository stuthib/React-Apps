{"ast":null,"code":"var _jsxFileName = \"/Users/stuthi/Desktop/sample-app/src/page.js\";\nimport Header from './header';\nimport Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\nimport { get } from 'lodash';\nimport React from 'react';\nconst sybmol = {\n  'player_1': 'X',\n  'player_2': 'O'\n};\nconst maxTime = 12;\nlet interval;\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[], [], []],\n        player: 'player_1',\n        start: false,\n        reset: false,\n        winnerFound: false\n      };\n    });\n    this.startTimer(maxTime);\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining = maxTime;\n    interval = setInterval(() => {\n      if (secondsRemaining === 0) {\n        clearInterval(interval);\n        this.setState({\n          gameOver: true\n        });\n      } else {\n        if (!get(this.state, 'winnerFound', false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState({\n            seconds: secondsRemaining,\n            gameOver: false\n          });\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if (interval) {\n      clearInterval(interval);\n    }\n\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state, 'seconds', maxTime);\n    const isWinnerFound = get(this.state, 'winnerFound', false);\n\n    if (secondsRemaining > 0 && !isWinnerFound) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1'\n        };\n      });\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state, 'matrix', [[], [], []]);\n\n    if (!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n\n    this.setState(() => {\n      return {\n        matrix\n      };\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n\n    if (this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if (this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n\n    this.setState(() => {\n      return {\n        winnerFound: winnerFound\n      };\n    });\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (col === 0) {\n      matched = currentVal === matrix[row][col + 1] && currentVal === matrix[row][col + 2];\n    } else if (col === 1) {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col + 1];\n    } else {\n      matched = currentVal === matrix[row][col - 1] && currentVal === matrix[row][col - 2];\n    }\n\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n\n    if (row === 0) {\n      matched = currentVal === matrix[row + 1][col] && currentVal === matrix[row + 2][col];\n    } else if (row === 1) {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row + 1][col];\n    } else {\n      matched = currentVal === matrix[row - 1][col] && currentVal === matrix[row - 2][col];\n    }\n\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n\n    if (!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = centerVal === matrix[0][0] && centerVal === matrix[2][2] || centerVal === matrix[0][2] && centerVal === matrix[2][0];\n    }\n\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state, 'seconds', maxTime);\n    return gameOver = secondsRemaining === 0;\n  }\n\n  render() {\n    //console.log('render: ', this.state);\n    return React.createElement(\"div\", {\n      style: {\n        'background': 'black',\n        'opacity': 0.8,\n        'height': '90vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Content, {\n      handleTileClick: this.handleTileClick,\n      matrixContent: get(this.state, 'matrix', [[], [], []]),\n      player: get(this.state, 'player', 'player_1'),\n      winnerFound: get(this.state, 'winnerFound', false),\n      secondsRemaining: get(this.state, 'seconds', maxTime),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(GameController, {\n      isGameOver: this.isGameOver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Page;","map":{"version":3,"sources":["/Users/stuthi/Desktop/sample-app/src/page.js"],"names":["Header","Content","Footer","GameController","get","React","sybmol","maxTime","interval","Page","Component","constructor","props","handleTileClick","bind","startTimer","componentDidMount","setState","matrix","player","start","reset","winnerFound","secondsRemaining","setInterval","clearInterval","gameOver","state","seconds","resetTimer","row","col","isWinnerFound","setMatrix","console","log","checkForWinner","checkHorizontal","checkVertical","checkDiagonal","matched","currentVal","centerVal","isGameOver","render"],"mappings":"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","sourcesContent":["import Header from './header';\nimport Content from './content';\nimport Footer from './footer';\nimport GameController from './controller';\n\nimport { get } from 'lodash';\nimport React from 'react';\n\nconst sybmol = {\n  'player_1' : 'X',\n  'player_2' : 'O'\n};\n\nconst maxTime = 12;\nlet interval;\n\nclass Page extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(() => {\n      return {\n        matrix: [[],[],[]],\n        player : 'player_1',\n        start: false,\n        reset: false,\n        winnerFound: false,\n      }\n    });\n    this.startTimer(maxTime);\n  }\n\n  startTimer(maxTime) {\n    let secondsRemaining =  maxTime;\n    interval = setInterval(() => {\n      if(secondsRemaining === 0) {\n        clearInterval(interval);\n        this.setState({\n          gameOver: true,\n        })\n      } else {\n        if(!get(this.state,'winnerFound',false)) {\n          secondsRemaining = secondsRemaining - 1;\n          this.setState({\n            seconds: secondsRemaining,\n            gameOver: false,\n          })\n        }\n      }\n    }, 1000);\n  }\n\n  resetTimer(maxTime) {\n    if(interval) {\n      clearInterval(interval);\n    }\n    this.startTimer(maxTime + 1);\n  }\n\n  handleTileClick(row, col, player) {\n    const secondsRemaining = get(this.state,'seconds',maxTime);\n    const isWinnerFound = get(this.state,'winnerFound',false);\n    if(secondsRemaining > 0 && !isWinnerFound) {\n      this.setMatrix(row, col, player);\n      this.setMatrix(row, col, player);\n      this.setState(() => {\n        return {\n          player: player === 'player_1' ? 'player_2' : 'player_1',\n        }\n      })\n      this.resetTimer(maxTime);\n    }\n  }\n\n  setMatrix(row, col, player) {\n    let matrix = get(this.state,'matrix', [[],[],[]]);\n    if(!matrix[row][col]) {\n      matrix[row][col] = sybmol[player];\n    } else {\n      console.log('Click an empty box!');\n    }\n    this.setState(() => {\n      return {\n        matrix,\n      }\n    }, this.checkForWinner(matrix, row, col, player));\n  }\n\n  checkForWinner(matrix, row, col, player) {\n    let winnerFound = get(this.state, 'winnerFound', false);\n    if(this.checkHorizontal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkVertical(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else if(this.checkDiagonal(matrix, row, col)) {\n      winnerFound = !winnerFound;\n    } else {\n      console.log('continue playing!');\n    }\n    this.setState(() => {\n      return {\n        winnerFound : winnerFound\n      }\n    })\n  }\n\n  checkHorizontal(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(col === 0) {\n      matched = (currentVal === matrix[row][col+1]) && (currentVal === matrix[row][col+2]);\n    } else if(col === 1) {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col+1]);\n    } else {\n      matched = (currentVal === matrix[row][col-1]) && (currentVal === matrix[row][col-2]);\n    }\n    return matched;\n  }\n\n  checkVertical(matrix, row, col) {\n    let matched = false;\n    const currentVal = matrix[row][col];\n    if(row === 0) {\n      matched = (currentVal === matrix[row+1][col]) && (currentVal === matrix[row+2][col]);\n    } else if(row === 1) {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row+1][col]);\n    } else {\n      matched = (currentVal === matrix[row-1][col]) && (currentVal === matrix[row-2][col]);\n    }\n    return matched;\n  }\n\n  checkDiagonal(matrix, row, col) {\n    let matched = false;\n    if(!matrix[1][1]) {\n      return matched;\n    } else {\n      const centerVal = matrix[1][1];\n      matched = ((centerVal === matrix[0][0]) &&\n                  (centerVal === matrix[2][2])) ||\n                ((centerVal === matrix[0][2]) &&\n                  (centerVal === matrix[2][0]));\n    }\n    return matched;\n  }\n\n  isGameOver() {\n    let secondsRemaining = get(this.state,'seconds',maxTime);\n    return gameOver = (secondsRemaining === 0);\n  }\n\n  render() {\n    //console.log('render: ', this.state);\n    return(\n      <div style={{'background':'black', 'opacity':0.8, 'height':'90vw'}}>\n        <Header />\n        <Content\n           handleTileClick={this.handleTileClick}\n           matrixContent={get(this.state, 'matrix', [[],[],[]])}\n           player={get(this.state, 'player', 'player_1')}\n           winnerFound={get(this.state,'winnerFound',false)}\n           secondsRemaining={get(this.state,'seconds',maxTime)}\n         />\n        <GameController\n          isGameOver={this.isGameOver}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}